name: complete environment

on:
 push:
 workflow_dispatch:

jobs:
   repo-list:
    runs-on: ubuntu-latest
    outputs:
         repositories: ${{ steps.repository.outputs.repositories }}
         userid: ${{ steps.userdetails.outputs.userid }}
    steps:
      - name: get user-id
        id: userdetails
        run: |
          user_id=$(curl -s https://api.github.com/users/Sakthi770 | jq '.id')
          echo "userid=$user_id" >> "$GITHUB_OUTPUT"
          echo $user_id
      - name: List Repositories
        id: repository
        run: |
          response=$(curl -L \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{secrets.PAT_TOKEN}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/search/repositories?q=user:Sakthi770")
          Repolist=$(echo "$response" | jq -r '.items[] | .full_name')
          echo "RepoList:$Repolist"

          for repo in $Repolist; do
            echo "$repo"
            environments=$(curl -s -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/$repo/environments | jq '.total_count')
            if [ "$environments" != "null" ] && [ "$environments" -eq 0 ]; then
              repos_without_envs+=("$repo")
            fi
          done
         
          formatted_repo_list=$(echo "$repos_without_envs" | sed 's/^/"/;s/$/"/' | paste -sd, - | sed 's/^/[/' | sed 's/$/]/')
          echo "$formatted_repo_list"
          if [ -z "$formatted_repo_list" ]; then
             echo "Error: Repo List is empty"
             exit 1
           fi
           echo "repositories=$formatted_repo_list" >> "$GITHUB_OUTPUT"
        
   # Add-Environments:
   #     needs: repo-list
   #     runs-on: ubuntu-latest
   #     environment: prod
   #     env:
   #      userid: ${{needs.repo-list.outputs.userid}}         
   #     strategy:
   #        matrix:
   #           repo: ${{ fromJson(needs.repo-list.outputs.repositories) }}
   #           environments: [dit,uat,prod]
   #     steps:
   #       - name: Repo name
   #         run: |
   #          echo "Running task in ${{ matrix.repo }}"
   #          echo "userid: $userid"
            
   #       - name: Creating Environment
   #         run: |
   #          echo "Creating environment"
   #          if [ "${{ matrix.environments }}" == "dit" ]; then
   #            request_body='{}'
   #          else
   #            request_body=$(jq -n --argjson uid "$userid" \
   #            '{"prevent_self_review":false,"reviewers":[{"type":"User","id":$uid}],"deployment_branch_policy":{"protected_branches":false,"custom_branch_policies":true}}')
   #          fi

   #          curl -L \
   #            -X PUT \
   #            -H "Accept: application/vnd.github+json" \
   #            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #            -H "X-GitHub-Api-Version: 2022-11-28" \
   #            https://api.github.com/repos/${{ matrix.repo }}/environments/${{ matrix.environments }} \
   #            -d "$request_body"
              
   #       - name: Creating branch policy
   #         if: ${{ matrix.environments != 'dit' }}
   #         run: | 
   #          echo "Creating deployment branch policy"
   #          curl -L \
   #            -X POST \
   #            -H "Accept: application/vnd.github+json" \
   #            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #            -H "X-GitHub-Api-Version: 2022-11-28" \
   #            https://api.github.com/repos/${{ matrix.repo }}/environments/${{ matrix.environments }}/deployment-branch-policies \
   #            -d '{"name":"master","type":"branch"}'
          
    
