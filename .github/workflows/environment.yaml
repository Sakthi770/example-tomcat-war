name: environment creation

on:
 push:
    
 workflow_dispatch:

jobs:
   demo:
    runs-on: ubuntu-latest

    steps:
      - name: get user-id
        run: curl -s https://api.github.com/users/Sakthi770 | jq '.id'
      - name: Check environment creation
        run: |
          echo "Creating environment"
          curl -L \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv \
            -d '{"wait_timer":30,"prevent_self_review":true,"reviewers":[{"type":"User","id":105368111}],"deployment_branch_policy":{"protected_branches":false,"custom_branch_policies":true}}'
          echo "Creating deployment branch policy"
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/deployment-branch-policies \
            -d '{"name":"main","type":"branch"}'
          echo "Adding environmental secrets and varaibles"
          PUBLIC_KEY=$(curl -L \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer <YOUR-TOKEN>" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/secrets/public-key | jq -r '.key')
          echo "::add-mask::$PUBLIC_KEY"
          echo "PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_ENV
          
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          pip install pynacl
  
      - name: Run Python script
        run: |
           python - <<EOF
           from base64 import b64encode
           from nacl import encoding, public
  
           def encrypt(public_key: str, secret_value: str) -> str:
               public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
               sealed_box = public.SealedBox(public_key)
               encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
               return b64encode(encrypted).decode("utf-8")
  
           encrypted_secret = encrypt("${{ env.PUBLIC_KEY }}", "MYSECRET")
           print(f"ENCRYPTED_SECRET={encrypted_secret}")
           with open(os.environ['GITHUB_ENV'], 'a') as f:
               f.write(f"ENCRYPTED_SECRET={encrypted_secret}\n")
           EOF

      - name: Use encrypted secret in next step
        run: |
          echo "Encrypted secret is $ENCRYPTED_SECRET"
