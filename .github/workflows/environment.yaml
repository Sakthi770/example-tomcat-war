name: environment creation

on:
   
 workflow_dispatch:

jobs:
   demo:
    runs-on: ubuntu-latest

    steps:
      - name: get user-id
        run: curl -s https://api.github.com/users/Sakthi770 | jq '.id'
      - name: Get Repositories Action
        id: get-repos
        uses: raven-actions/get-repos@v1
        with:
          owner: Sakthi770
          github-token: ${{ secrets.PAT_TOKEN }}
      - name: rpeo list
        run : echo '${{steps.get-repos.outputs.repos}}' | jq -r '.[] | select(.private == true) | .full_name'

      - name: List Repositories using octokit
        run: |          
         # response=$(curl -L \
         #   -H "Accept: application/vnd.github+json" \
         #   -H "Authorization: Bearer ${{secrets.PAT_TOKEN}}" \
         #   -H "X-GitHub-Api-Version: 2022-11-28" \
         #    "https://api.github.com/search/repositories?q=user:Sakthi770" | jq -r '.items[] | .full_name' )

         # # Store the output in an array
         # # IFS=$'\n' read -rd '' -a full_names <<<"$response"
         # full_names=()
         # while IFS= read -r line; do
         #   full_names+=("$line")
         # done <<< "$response"

         
         # # Print the array elements
         # for full_name in "${full_names[@]}"; do
         #   echo "Full name: $full_name"
         # done
         response=$(curl -L \
           -H "Accept: application/vnd.github+json" \
           -H "Authorization: Bearer ${{secrets.PAT_TOKEN}}" \
           -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/search/repositories?q=user:Sakthi770")
         #!/bin/bash


         fullname=$(echo "$response" | jq -r '.items[] | .full_name')
         echo "fullname:$fullname"
         
         formatted_list=$(echo "$fullname" | sed 's/^/"/;s/$/"/' | paste -sd, - | sed 's/^/[/' | sed 's/$/]/')
         echo "$formatted_list"

         # full_names=()
         # while IFS= read -r line; do
         #   full_names+=("$line")
         # done <<< "$(echo "$response" | jq -r '.items[] | .full_name')"
          
         # # Convert the array to a JSON array
         # json_array=$(printf "[\"%s\"]" "$(IFS='","'; echo "${full_names[*]}")")
          
         # Correct the formatting to ensure the proper comma separation
         #json_array="[\"$(IFS='","'; echo "${full_names[*]}")\"]"
         #JSON Array: ["Sakthi770/Tekton"Sakthi770/DBschematest"Sakthi770/git-training"Sakthi770/SelfhostedRunner"Sakthi770/GitPractice"Sakthi770/database-management"Sakthi770/flyway-production"Sakthi770/azure_devops"Sakthi770/flyway-selfhosted"Sakthi770/environmentcheck"]
         #json_array=$(printf '["%s"]' "$(IFS=','; echo "${full_names[*]}")")
         #JSON Array: ["Sakthi770/Tekton,Sakthi770/DBschematest,Sakthi770/git-training,Sakthi770/SelfhostedRunner,Sakthi770/GitPractice,Sakthi770/database-management,Sakthi770/flyway-production,Sakthi770/azure_devops,Sakthi770/flyway-selfhosted,Sakthi770/environmentcheck"]
         echo "JSON Array: $formatted_list"

           if [ -z "$formatted_list" ]; then
             echo "Error: JSON array is empty"
             exit 1
           fi
         echo 'repositories=["Sakthi770/Tekton","Sakthi770/DBschematest","Sakthi770/git-training","Sakthi770/SelfhostedRunner","Sakthi770/GitPractice","Sakthi770/database-management","Sakthi770/flyway-production","Sakthi770/azure_devops","Sakthi770/flyway-selfhosted","Sakthi770/environmentcheck"]' >> "$GITHUB_OUTPUT"
   
   check-repo-name:
       needs: demo
       runs-on: ubuntu-latest
       strategy:
          matrix:
             repo: ${{ fromJson(needs.demo.outputs.repositories) }}
       steps:
         - name: check repo name
           run: echo "Running task in ${{ matrix.repo }}
         # curl -L \
         #  -H "Accept: application/vnd.github+json" \
         #  -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
         #  -H "X-GitHub-Api-Version: 2022-11-28" \
         #  https://api.github.com/Sakthi770/repos | jq -r '[] | map(select(.private == true)) | .full_name'

   #    - name: Check environment creation
   #      run: |
   #        echo "Creating environment"
   #        curl -L \
   #          -X PUT \
   #          -H "Accept: application/vnd.github+json" \
   #          -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #          -H "X-GitHub-Api-Version: 2022-11-28" \
   #          https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv \
   #          -d '{"wait_timer":1,"prevent_self_review":false,"reviewers":[{"type":"User","id":105368111}],"deployment_branch_policy":{"protected_branches":false,"custom_branch_policies":true}}'
   #        echo "Creating deployment branch policy"
   #        curl -L \
   #          -X POST \
   #          -H "Accept: application/vnd.github+json" \
   #          -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #          -H "X-GitHub-Api-Version: 2022-11-28" \
   #          https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/deployment-branch-policies \
   #          -d '{"name":"master","type":"branch"}'
   #        echo "Adding environmental secrets and varaibles"
   #        RESPONSE=$(curl -L \
   #          -H "Accept: application/vnd.github+json" \
   #          -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #          -H "X-GitHub-Api-Version: 2022-11-28" \
   #          https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/secrets/public-key)
   #        echo "::add-mask::$RESPONSE"
   #        echo "PUBLIC_KEY=$(echo $RESPONSE | jq -r '.key')" >> $GITHUB_ENV
   #        echo "KEY_ID=$(echo $RESPONSE | jq -r '.key_id')" >> $GITHUB_ENV

   #    - name: Set up Python
   #      uses: actions/setup-python@v2
   #      with:
   #        python-version: '3.x'
   #    - name: Install dependencies
   #      run: |
   #        pip install pynacl
  
   #    - name: Run Python script
   #      run: |
   #         echo "ENCRYPTED_SECRET=$(python - <<EOF
   #         from base64 import b64encode
   #         from nacl import encoding, public
           
   #         def encrypt(public_key: str, secret_value: str) -> str:
   #             """Encrypt a Unicode string using the public key."""
   #             public_key = public.PublicKey(public_key.encode('utf-8'), encoding.Base64Encoder())
   #             sealed_box = public.SealedBox(public_key)
   #             encrypted = sealed_box.encrypt(secret_value.encode('utf-8'))
   #             return b64encode(encrypted).decode('utf-8')
           
   #         print(encrypt('$PUBLIC_KEY', 'MYSECRET'))
   #         EOF
   #         )" >> $GITHUB_ENV
   #         echo "::add-mask::$ENCRYPTED_SECRET"
   #    - name: create a environment secret
   #      run: |
   #        echo "Encrypted secret is "
   #        echo "Mysecret is $MYSECRET "
   #        curl -L \
   #        -X PUT \
   #        -H "Accept: application/vnd.github+json" \
   #        -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #        -H "X-GitHub-Api-Version: 2022-11-28" \
   #        https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/secrets/MYSECRET \
   #        -d '{"encrypted_value":"${{ env.ENCRYPTED_SECRET }}","key_id":"${{ env.KEY_ID }}"}'

   #    - name: create a environment variable
   #      run: |
   #        curl -L \
   #        -X POST \
   #        -H "Accept: application/vnd.github+json" \
   #        -H "Authorization: Bearer ${{ secrets.PAT_TOKEN }}" \
   #        -H "X-GitHub-Api-Version: 2022-11-28" \
   #        https://api.github.com/repos/Sakthi770/example-tomcat-war/environments/workflowenv/variables \
   #        -d '{"name":"TRIALVAR","value":"testvar"}'

   # testenv:
   #  runs-on: ubuntu-latest
   #  environment: workflowenv
   #  needs: demo

   #  steps:
   #    - name: Get secret and variable from environment
   #      run: |
   #        echo "Env VAR is ${{ vars.TRIALVAR }}"
   #        echo "Env Secret is ${{ secrets.MYSECRET }}"
    
