name: test1

on:
  push:
  workflow_dispatch:
env:
  TEAM_NAMES: '["devops-repo-admins", "devops"]'

jobs:
  # check-github-context:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     reviewers_json: ${{ steps.testing.outputs.reviewers_json }}
  #   steps:
  #     - name: Print repository owner login
  #       run: |
  #         echo ${{ github.event.repository.owner.login }}
  #         echo ${{ github.event.repository.owner }}
  #         echo ${{ github.repository_owner }}

  #     - name: Print
  #       run: env | sort
  #     - name: Dump github context
  #       run:   echo "$GITHUB_CONTEXT"
  #       shell: bash
  #       env:
  #        GITHUB_CONTEXT: ${{ toJson(github) }}

  repo-list:
    runs-on: ubuntu-latest
    outputs:
        REPOS: ${{ steps.get-repos.outputs.repos }}
        ORG_NAME: ${{ steps.org_prefix.outputs.ORG_NAME }}
        TEST_TOKEN: ${{ steps.githubtoken.outputs.TEST_TOKEN }}
    steps:
      - name: Set org prefix & variables
        id: org_prefix
        shell: bash
        run: |
          echo "runner_key_vault_name=runnerkeyvaultname" >> "$GITHUB_OUTPUT"
          echo "ORG_NAME=esxp-platform" >> "$GITHUB_OUTPUT"

      - name: github access token
        id: githubtoken
        run: |
          echo "Vault name: ${{ steps.org_prefix.outputs.runner_key_vault_name }}" 
          GH_TOKEN=TEST
          echo "::add-mask::$GH_TOKEN"
          echo "TEST_TOKEN=$GH_TOKEN" >> "$GITHUB_OUTPUT"
          echo "TEST_TOKEN=$GH_TOKEN" >> "$GITHUB_ENV"
    
      - name: Get list of repositories in the organization
        id: get-repos
        run: |
            ORG_NAME=${{ steps.org_prefix.outputs.org_name }}
  
            echo "REPOS=["environment-approval-demo","packer-build"]" >> "$GITHUB_OUTPUT"
            #echo "repos=["environment-approval-demo","packer-build"]" >> "$GITHUB_OUTPUT"
            echo "repos=$REPOS"

  check-environments:
    runs-on: ubuntu-latest
    needs: repo-list
    env:
      ORG_NAME: ${{ needs.repo-list.outputs.ORG_NAME }}
      TEST_TOKEN: ${{ needs.repo-list.outputs.TEST_TOKEN }}
    outputs:
      repos_without_environments: ${{ steps.filter-repos.outputs.repos_without_environments }}
    steps:
      - name: Get all repos
        id: get-all-repos
        run: |
          echo "repos=${{ needs.repo-list.outputs.repos }}"
          echo "repos=${{ needs.repo-list.outputs.repos }}" >> $GITHUB_OUTPUT
 
      - name: Check environments
        id: filter-repos
        run: |
          REPO_LIST=${{ needs.repo-list.outputs.repos }}
          echo $REPO_LIST
          echo $ORG_NAME
          echo $TEST_TOKEN
          echo "repos_without_environments=[\"test\"]" >> $GITHUB_OUTPUT
          echo "repos_without_environments=[\"test\"]" >> $GITHUB_ENV

  add-environments:
    needs: [check-environments, repo-list]
    runs-on: ubuntu-latest
    steps:
      - name: github access token
        run: |
          echo "Repos without environments: ${{ needs.check-environments.outputs.repos_without_environments }}"
          echo "Parsed JSON: $(echo '${{ needs.check-environments.outputs.repos_without_environments }}' | jq '.')"
          echo "Length: $(echo '${{ needs.check-environments.outputs.repos_without_environments }}' | jq '. | length')"
